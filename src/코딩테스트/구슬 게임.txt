import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

class Tree{ //트리 클래스
    class Node{ //트리 노드 클래스
        private int val; //해당 노드의 값 (구슬 개수)
        private int height; //해당 노드의 깊이 (height 번째 게임)
        private Node winNode; //가위바위보에서 이겼을 때의 구슬 개수
        private Node drawNode; //가위바위보에서 비겼을 때의 구슬 개수
        private Node loseNode; //가위바위보에서 졌을 때의 구슬 개수

        public Node(int val, int height){
            this.val = val;
            this.height = height;
        }
    }
    Node root; //트리의 루트 노드 생성
    public void makeTree(int n, int k, int sum){ //트리 생성 함수
    //k는 height와 비교, sum은 게임이 끝나는 경우(상대방의 구슬을 다 뺏었을 때)
        root = makeNode(n,0,k,sum);
    }
    public Node makeNode(int n, int height, int k, int sum){
        if(height>k) return null; //height가 k보다 크면 게임 횟수를 넘기는 것이기 때문에 게임 횟수를 넘어가면 노드 생성 못하게 함
        else if(sum<n) return null; //상대방의 구슬을 모두 뺏은 경우보다 구슬을 더 가질 순 없으므로 상대방의 구슬을 모두 뺏으면 게임 끝나게 하기 위해 노드 생성 못하게 함
        else if(n<0) return null; //보유한 구슬이 0이라면 게임에서 진 것이므로 더 이상 노드를 생성하지 못하게 함

        Node newNode = new Node(n,height); 
        newNode.winNode = makeNode(n+1,height+1, k, sum);
        newNode.drawNode = makeNode(n, height+1, k, sum);
        newNode.loseNode = makeNode(n-1, height+1, k, sum);

        return newNode;
    }

    public int count(Node node, int sum) {
        if (node == null) return 0; //노드가 null이라면 0을 리턴
        int cnt = 0;
        if (node.val == sum || node.val == 0) { //노드의 값이 sum과 같거나(게임에서 이겼을 때) 0과 같다면(게임에서 졌을 때) cnt의 값을 1로 변경
            cnt = 1;
        }else{ // 노드들을 돌면서 게임이 끝나는 경우의 횟수를 셈
            cnt += count(node.winNode, sum);
            cnt += count(node.drawNode, sum);
            cnt += count(node.loseNode, sum);
        }
        return cnt;
    }
}

public class Test7 {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] inputs = (br.readLine()).split(" ");

        int n = Integer.parseInt(inputs[0]);
        int m = Integer.parseInt(inputs[1]);
        int k = Integer.parseInt(inputs[2]);

        int sum = n+m;

        Tree tree = new Tree();
        tree.makeTree(n,k,sum);
        int result = tree.count(tree.root,sum);
        System.out.println(result);
    }
}