import java.util.*;

class Solution {
    private char[] arr;
    private boolean[] visited;
    private HashSet<Integer> hs = new HashSet<>();
    
    public boolean isPrime(int n){
        if(n<2){
            return false;
        }
        for(int i=2; i<=Math.sqrt(n); i++){
            if(n%i == 0){
                return false;
            }
        }
        return true;
    }
    
    public void dfs(String s, int cnt){
        if(s!=""){
            int num = Integer.parseInt(s);
            if(isPrime(num)){
                hs.add(num); 
            }
        }
        if(cnt==arr.length){
            return;
        }
        for(int i=0; i<arr.length; i++){
            if(!visited[i]){
                visited[i] = true;
                dfs(s+arr[i],cnt+1);
                visited[i] = false;
            }
        }
    }
    
    public int solution(String numbers) {
        arr = new char[numbers.length()];
        visited = new boolean[numbers.length()];
        
        for(int i=0; i<numbers.length();i++){
            arr[i] = numbers.charAt(i);
        }
        dfs("",0);
        
        return hs.size();
    }
}